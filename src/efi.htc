<!--
Font glyphs(Eight's Font Icons)
licensed for use under the GNU Lesser General Public License (LGPL) Version 3.
Copyright Â© 2023 Beijing Manhuiweidu Technology Co., Ltd.
You may find more information @ https://github.com/jekler/eis
This file is part of EIS (Eight's IE SVG).
EIS is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License (LGPL) Version 3 as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
EIS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License (and the GNU Lesser General Public License) along with EIS. If not, see https://www.gnu.org/licenses/.
-->
<PUBLIC:COMPONENT lightWeight="true">
<PUBLIC:ATTACH EVENT="ondocumentready" FOR="element" ONEVENT="show()" />
<PUBLIC:ATTACH EVENT="ondetach" FOR="element" ONEVENT="cleanup()" />
<script type="text/javascript">
var elm = element,
    s = elm.style,
    cs = elm.currentStyle,
    key = s['efi-monitor'] || cs.getAttribute('efi-monitor');
if (!key) {
    key = elm.className.split(" ");
    if (key.length > 0) key = key[0]
}
if (!key) key = elm.id ? '#' + elm.id : null;
if (key) {
    var efi = window['efi'];
    if (!efi) {
        window['efi'] = efi = {
            _match: function (key, config) {
                if (key) {
                    key = key.split(" ");
                    if (key.length > 0) for (var i = 0; i < key.length; i++) {
                        var context = config[key[i]];
                        if (context) return context;
                    };
                }
                return null;
            },
            _getElements: function (type, value, elm) {
                var elements = elm.all,
                    values = value ? value.split(" ") : null,
                    current,
                    returnElements = [];
                for (var l = 0, ll = elements.length; l < ll; l += 1) {
                    current = elements[l];
                    try {
                        if (current[type] && value) {
                            var types = current[type].split(" ");
                            outer: for (var m = 0; m < types.length; m++) {
                                for (var n = 0; n < values.length; n++) if (values[n] == types[m]) {
                                    returnElements.push(current);
                                    break outer;
                                }
                            }
                        }
                    } catch (e) { }
                }
                return returnElements;
            }
        }
    }
    var context = efi[key];
    if (!context) {
        var _type = s['efi-type'] || cs.getAttribute('efi-type') || 'className',
            _self = s['efi-self'] || cs.getAttribute('efi-self'),
            _nostrict = s['efi-nostrict'] || cs.getAttribute('efi-nostrict'),
            _target = s['efi-target'] || cs.getAttribute('efi-target'),
            _content = s['efi-content'] || cs.getAttribute('efi-content');
        if (_content) {
            _content = _content.split("|");
            var _c = {}
            if (_content.length > 0) for (var i = 0; i < _content.length - 1; i += 2) {
                _c[_content[i]] = _content[i + 1];
            }
            efi[key] = {
                type: _type,
                target: _target,
                self: _self,
                nostrict: _nostrict,
                content: _c
            }
        }
    }
}
s = cs = key = void 0;

function show() {
    var efi = window ? window['efi'] : null;
    if (efi && elm) {
        var context = efi._match('#' + elm.id, efi) || efi._match(elm.className, efi);
        if (context) {
            var targets = context.target ? efi._getElements(context.type, context.target, elm) : [elm];
            if (targets) if (context.self) {
                var content = efi._match('#' + elm.id, context.content) || efi._match(elm.className, context.content);
                if (content) for (var i = 0; i < targets.length; i++) {
                    targets[i].innerHTML = content;
                } else if (!context.nostrict) for (var i = 0; i < targets.length; i++) {
                    targets[i].innerHTML = '';
                };
            } else for (var i = 0; i < targets.length; i++) {
                var content = efi._match('#' + targets[i].id, context.content) || efi._match(targets[i].className, context.content);
                if (content) targets[i].innerHTML = content;
                else if (!context.nostrict) targets[i].innerHTML = '';
            };
        }
    }
}

function cleanup() {
    var efi = window ? window['efi'] : null;
    if (efi && elm) {
        var context = efi._match('#' + elm.id, efi) || efi._match(elm.className, efi);
        if (context) {
            var targets = context.target ? efi._getElements(context.type, context.target, elm) : [elm];
            if (targets) for (var i = 0; i < targets.length; i++) {
                targets[i].innerHTML = '';
            };
        }
    }
}
</script>
<script type="text/vbscript"></script>
</PUBLIC:COMPONENT>